{
	"info": {
		"_postman_id": "56d79a10-7374-4e37-b2bb-f2d710fa749c",
		"name": "WorkFlow_Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28319607"
	},
	"item": [
		{
			"name": "1.POST_CreateUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();\r",
							"const userId = res.id;\r",
							"const userName = res.name;\r",
							"const userEmail = res.email;\r",
							"const userGender = res.gender;\r",
							"const userStatus = res.status;\r",
							"\r",
							"console.log(\"User Id is :\"+userId);\r",
							"console.log(\"User NAme is :\"+userName);\r",
							"console.log(\"User MailID is :\"+userEmail);\r",
							"console.log(\"User Gender is :\"+userGender);\r",
							"console.log(\"User Gender is :\"+userStatus);\r",
							"\r",
							"//use local variable to set the userid\r",
							"pm.variables.set(\"user_id\",userId);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{WorkFlowTokenID}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",//this is name \r\n    \"email\": \"sha_{{$randomEmail}}\",// this is email id\r\n    \"gender\": \"male\", // this gender identity\r\n    \"status\": \"inactive\" // user status\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{WorkFlowBaseURL}}/public/v2/users",
					"host": [
						"{{WorkFlowBaseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "2.GET_CreatedUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 8cc2fb2d65333fab4f7a3aa752662dac66d862fb2afa9a5578155b94a3e9d32f",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"email\": \"sha_{{$randomEmail}}\",\r\n    \"gender\": \"male\",\r\n    \"status\": \"inactive\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{WorkFlowBaseURL}}/public/v2/users/{{user_id}}",
					"host": [
						"{{WorkFlowBaseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "3.PATCH_UpdateUSer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "{{WorkFlowTokenID}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",//this is name \r\n    \"email\": \"sha_{{$randomEmail}}\"// this is email id\r\n  \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{WorkFlowBaseURL}}/public/v2/users//{{user_id}}",
					"host": [
						"{{WorkFlowBaseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "4.DELETE-User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 8cc2fb2d65333fab4f7a3aa752662dac66d862fb2afa9a5578155b94a3e9d32f",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{WorkFlowBaseURL}}/public/v2/users/{{user_id}}",
					"host": [
						"{{WorkFlowBaseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "5.GET_DEletedUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer 8cc2fb2d65333fab4f7a3aa752662dac66d862fb2afa9a5578155b94a3e9d32f",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"email\": \"sha_{{$randomEmail}}\",\r\n    \"gender\": \"male\",\r\n    \"status\": \"inactive\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{WorkFlowBaseURL}}/public/v2/users/{{user_id}}",
					"host": [
						"{{WorkFlowBaseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Response time is less than 5000ms\", function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
					"});"
				]
			}
		}
	]
}